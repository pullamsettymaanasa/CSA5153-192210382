#include <stdio.h>
#include <string.h>
#include <ctype.h>

void generateCipherAlphabet(const char* keyword, char* cipherAlphabet) {
    int used[26] = {0}; // To keep track of used letters
    int index = 0;

    // Add the keyword to the cipher alphabet
    for (int i = 0; keyword[i] != '\0'; i++) {
        if (isalpha(keyword[i])) {
            char ch = toupper(keyword[i]);
            if (!used[ch - 'A']) {
                cipherAlphabet[index++] = ch;
                used[ch - 'A'] = 1;
            }
        }
    }

    // Add the remaining letters to the cipher alphabet
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (!used[ch - 'A']) {
            cipherAlphabet[index++] = ch;
        }
    }
    cipherAlphabet[index] = '\0';
}

void encrypt(const char* plaintext, const char* cipherAlphabet, char* ciphertext) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            char ch = toupper(plaintext[i]);
            ciphertext[i] = cipherAlphabet[ch - 'A'];
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[strlen(plaintext)] = '\0';
}

void decrypt(const char* ciphertext, const char* cipherAlphabet, char* plaintext) {
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char ch = toupper(ciphertext[i]);
            for (int j = 0; j < 26; j++) {
                if (cipherAlphabet[j] == ch) {
                    plaintext[i] = 'A' + j;
                    break;
                }
            }
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

int main() {
    const char* keyword = "CIPHER";
    char cipherAlphabet[27];
    char plaintext[100];
    char ciphertext[100];

    // Generate the cipher alphabet
    generateCipherAlphabet(keyword, cipherAlphabet);

    // Display the generated cipher alphabet
    printf("Cipher Alphabet: %s\n", cipherAlphabet);

    // Input the plaintext to be encrypted
    printf("Enter a message to encrypt: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = 0; // Remove newline character

    // Encrypt the plaintext
    encrypt(plaintext, cipherAlphabet, ciphertext);
    printf("Encrypted message: %s\n", ciphertext);

    // Decrypt the ciphertext
    decrypt(ciphertext, cipherAlphabet, plaintext);
    printf("Decrypted message: %s\n", plaintext);

    return 0;
}
