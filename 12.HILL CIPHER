#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 2 // For a 2x2 Hill cipher matrix

// Function to compute the modular inverse
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1; // Inverse does not exist
}

// Function to prepare the plaintext by removing non-alphabet characters
void prepareText(const char* text, char* preparedText) {
    int j = 0;
    for (int i = 0; i < strlen(text); i++) {
        if (isalpha(text[i])) {
            preparedText[j++] = tolower(text[i]) - 'a';
        }
    }
    // If the length is odd, append 'x' (24) to make it even
    if (j % SIZE != 0) {
        preparedText[j++] = 24;
    }
    preparedText[j] = '\0';
}

// Function to multiply matrices
void multiplyMatrices(int key[SIZE][SIZE], int input[SIZE], int result[SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        result[i] = 0;
        for (int j = 0; j < SIZE; j++) {
            result[i] += key[i][j] * input[j];
        }
        result[i] %= 26; // Modulo 26 for letters
    }
}

// Function to encrypt using the Hill cipher
void encryptHillCipher(const char* plaintext, int key[SIZE][SIZE], char* ciphertext) {
    char preparedText[100];
    prepareText(plaintext, preparedText);

    int length = strlen(preparedText);
    for (int i = 0; i < length; i += SIZE) {
        int input[SIZE] = { preparedText[i], preparedText[i + 1] };
        int result[SIZE];
        multiplyMatrices(key, input, result);
        ciphertext[i] = result[0] + 'a';
        ciphertext[i + 1] = result[1] + 'a';
    }
    ciphertext[length] = '\0';
}

int main() {
    int key[SIZE][SIZE] = { {9, 4}, {5, 7} };
    const char* plaintext = "meet me at the usual place at ten rather than eight oclock";
    char ciphertext[100];

    encryptHillCipher(plaintext, key, ciphertext);
    printf("Encrypted message: %s\n", ciphertext);

    return 0;
}
