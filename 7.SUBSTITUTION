#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_TEXT_LENGTH 1000

// Function to count character frequency
void countFrequency(const char* text, int* freq) {
    for (int i = 0; i < strlen(text); i++) {
        if (isprint(text[i])) {
            freq[(unsigned char)text[i]]++;
        }
    }
}

// Function to print frequency table
void printFrequencyTable(int* freq) {
    printf("Character Frequency:\n");
    for (int i = 0; i < 256; i++) {
        if (freq[i] > 0) {
            printf("%c: %d\n", i, freq[i]);
        }
    }
}

// Function to substitute characters based on the key
void substituteText(const char* text, const char* key, char* decrypted) {
    for (int i = 0; i < strlen(text); i++) {
        if (isprint(text[i])) {
            decrypted[i] = key[(unsigned char)text[i]];
        } else {
            decrypted[i] = text[i];
        }
    }
    decrypted[strlen(text)] = '\0';
}

int main() {
    const char ciphertext[] = "53‡‡†305))6*;4826)4‡.)4‡);806*;48†8¶60))85;;]8*;:‡*8†83\n(88)5*†;46(;88*96*?;8)*‡(;485);5*†2:*‡(;4956*2(5*—4)8¶8*\n;4069285);)6†8)4‡‡;1(‡9;48081;8:8‡1;48†85;4)485†528806*81\n(‡9;48;(88;4(‡?34;48)4‡;161;:188;‡?";
    char decrypted[MAX_TEXT_LENGTH];
    int frequency[256] = {0};
    char substitutionKey[256];
    
    // Initialize substitution key to map each character to itself
    for (int i = 0; i < 256; i++) {
        substitutionKey[i] = i;
    }

    // Count character frequency in the ciphertext
    countFrequency(ciphertext, frequency);
    
    // Print the frequency table
    printFrequencyTable(frequency);

    // Substitute based on guessed key
    // Here we are manually setting some substitutions based on guesses
    substitutionKey['‡'] = 'E'; // Suppose '‡' is the most frequent character
    substitutionKey['5'] = 'T'; // Suppose '5' corresponds to 'T'
    substitutionKey['3'] = 'H'; // Suppose '3' corresponds to 'H'
    // Add more guesses as needed

    // Substitute characters in the ciphertext using the guessed key
    substituteText(ciphertext, substitutionKey, decrypted);

    // Print the partially decrypted text
    printf("\nPartially Decrypted Text:\n%s\n", decrypted);

    return 0;
}
