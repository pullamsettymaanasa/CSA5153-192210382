#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

void generatePlayfairMatrix(const char* keyword, char matrix[SIZE][SIZE]) {
    int used[26] = {0};
    int index = 0;

    // Fill the matrix with the keyword
    for (int i = 0; keyword[i] != '\0'; i++) {
        char ch = toupper(keyword[i]);
        if (ch == 'J') ch = 'I'; // Treat 'J' as 'I'
        if (!used[ch - 'A']) {
            matrix[index / SIZE][index % SIZE] = ch;
            used[ch - 'A'] = 1;
            index++;
        }
    }

    // Fill the remaining matrix with other letters
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (ch == 'J') continue; // Skip 'J'
        if (!used[ch - 'A']) {
            matrix[index / SIZE][index % SIZE] = ch;
            used[ch - 'A'] = 1;
            index++;
        }
    }
}

void findPosition(char matrix[SIZE][SIZE], char ch, int* row, int* col) {
    if (ch == 'J') ch = 'I'; // Treat 'J' as 'I'
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

void decryptDigraph(char matrix[SIZE][SIZE], char digraph[2], char* decrypted) {
    int row1, col1, row2, col2;
    findPosition(matrix, digraph[0], &row1, &col1);
    findPosition(matrix, digraph[1], &row2, &col2);

    if (row1 == row2) {
        decrypted[0] = matrix[row1][(col1 + SIZE - 1) % SIZE];
        decrypted[1] = matrix[row2][(col2 + SIZE - 1) % SIZE];
    } else if (col1 == col2) {
        decrypted[0] = matrix[(row1 + SIZE - 1) % SIZE][col1];
        decrypted[1] = matrix[(row2 + SIZE - 1) % SIZE][col2];
    } else {
        decrypted[0] = matrix[row1][col2];
        decrypted[1] = matrix[row2][col1];
    }
}

void decryptPlayfairCipher(const char* ciphertext, const char* keyword, char* plaintext) {
    char matrix[SIZE][SIZE];
    generatePlayfairMatrix(keyword, matrix);

    for (int i = 0; i < strlen(ciphertext); i += 2) {
        if (isalpha(ciphertext[i]) && isalpha(ciphertext[i+1])) {
            char digraph[2] = { toupper(ciphertext[i]), toupper(ciphertext[i+1]) };
            char decrypted[2];
            decryptDigraph(matrix, digraph, decrypted);
            plaintext[i] = decrypted[0];
            plaintext[i+1] = decrypted[1];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

int main() {
    const char* ciphertext = "KXJEY UREBE ZWEHE WRYTU HEYFS KREHE GOYFI WTTTU OLKSY CAJPO BOTEI ZONTX BYBNT GONEY CUZWR GDSON SXBOU YWRHE BAAHY USEDQ";
    const char* keyword = "KEYWORD";
    char plaintext[500];

    decryptPlayfairCipher(ciphertext, keyword, plaintext);
    printf("Decrypted message: %s\n", plaintext);

    return 0;
}
