import numpy as np

def mod_inverse(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None

def matrix_mod_inverse(matrix, modulus):
    det = int(np.round(np.linalg.det(matrix)))
    det_inv = mod_inverse(det % modulus, modulus)
    if det_inv is None:
        raise ValueError("Matrix is not invertible")
    
    adjugate_matrix = np.linalg.inv(matrix).T * det
    inv_matrix = (det_inv * adjugate_matrix) % modulus
    return inv_matrix.astype(int)

def encrypt_hill(plaintext, key_matrix):
    key_matrix = np.array(key_matrix)
    modulus = 26
    if key_matrix.shape[0] != key_matrix.shape[1]:
        raise ValueError("Key matrix must be square")

    padded_text = plaintext + 'X' * (key_matrix.shape[0] - len(plaintext) % key_matrix.shape[0])
    encrypted_text = ''
    
    for i in range(0, len(padded_text), key_matrix.shape[0]):
        block = np.array([ord(char) - ord('A') for char in padded_text[i:i + key_matrix.shape[0]]])
        encrypted_block = np.dot(key_matrix, block) % modulus
        encrypted_text += ''.join(chr(num + ord('A')) for num in encrypted_block)
    
    return encrypted_text

def decrypt_hill(ciphertext, key_matrix):
    key_matrix = np.array(key_matrix)
    modulus = 26
    inv_key_matrix = matrix_mod_inverse(key_matrix, modulus)
    decrypted_text = ''
    
    for i in range(0, len(ciphertext), key_matrix.shape[0]):
        block = np.array([ord(char) - ord('A') for char in ciphertext[i:i + key_matrix.shape[0]]])
        decrypted_block = np.dot(inv_key_matrix, block) % modulus
        decrypted_text += ''.join(chr(int(num) + ord('A')) for num in decrypted_block)
    
    return decrypted_text


key_matrix = [[3, 3], [2, 5]]
message = "HELLO"

encrypted_message = encrypt_hill(message, key_matrix)
decrypted_message = decrypt_hill(encrypted_message, key_matrix)

print(f"Original: {message}")
print(f"Encrypted: {encrypted_message}")
print(f"Decrypted: {decrypted_message}")
