#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to repeat the key so it matches the length of the plaintext
void generateKey(char* plaintext, char* key, char* newKey) {
    int i, j = 0;
    int keyLen = strlen(key);
    int textLen = strlen(plaintext);

    for (i = 0; i < textLen; ++i) {
        if (isalpha(plaintext[i])) {
            newKey[i] = toupper(key[j % keyLen]);
            j++;
        } else {
            newKey[i] = plaintext[i];
        }
    }
    newKey[textLen] = '\0';
}

// Function to encrypt the plaintext using the Vigenère cipher
void vigenereEncrypt(char* plaintext, char* key, char* ciphertext) {
    char newKey[100];
    generateKey(plaintext, key, newKey);

    for (int i = 0; plaintext[i] != '\0'; ++i) {
        if (isalpha(plaintext[i])) {
            char offset = isupper(plaintext[i]) ? 'A' : 'a';
            ciphertext[i] = ((plaintext[i] - offset) + (newKey[i] - 'A')) % 26 + offset;
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[strlen(plaintext)] = '\0';
}

int main() {
    char plaintext[100], key[100], ciphertext[100];

    // Input the plaintext to be encrypted
    printf("Enter a message to encrypt: ");
    gets(plaintext);

    // Input the key
    printf("Enter the key: ");
    gets(key);

    // Encrypt the plaintext using the Vigenère cipher
    vigenereEncrypt(plaintext, key, ciphertext);

    // Output the encrypted text
    printf("Encrypted message: %s\n", ciphertext);

    return 0;
}
