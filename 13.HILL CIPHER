#include <stdio.h>
#include <stdlib.h>

#define SIZE 2 // For a 2x2 Hill cipher matrix

// Function to calculate the modular inverse of a number
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1; // Modular inverse does not exist
}

// Function to compute the inverse of a matrix
void inverseMatrix(int matrix[SIZE][SIZE], int inverse[SIZE][SIZE]) {
    int determinant = (matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]) % 26;
    if (determinant < 0) determinant += 26;

    int determinantInverse = modInverse(determinant, 26);
    if (determinantInverse == -1) {
        printf("Matrix is not invertible\n");
        exit(1);
    }

    inverse[0][0] = matrix[1][1] * determinantInverse % 26;
    inverse[0][1] = -matrix[0][1] * determinantInverse % 26;
    inverse[1][0] = -matrix[1][0] * determinantInverse % 26;
    inverse[1][1] = matrix[0][0] * determinantInverse % 26;

    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (inverse[i][j] < 0) inverse[i][j] += 26;
        }
    }
}

// Function to multiply matrices
void multiplyMatrices(int mat1[SIZE][SIZE], int mat2[SIZE][SIZE], int result[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            result[i][j] = 0;
            for (int k = 0; k < SIZE; k++) {
                result[i][j] += mat1[i][k] * mat2[k][j];
            }
            result[i][j] %= 26;
        }
    }
}

// Function to recover the key matrix from known plaintext-ciphertext pairs
void recoverKeyMatrix(int plain[SIZE][SIZE], int cipher[SIZE][SIZE], int key[SIZE][SIZE]) {
    int plainInv[SIZE][SIZE];
    inverseMatrix(plain, plainInv);

    int temp[SIZE][SIZE];
    multiplyMatrices(cipher, plainInv, temp);

    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            key[i][j] = temp[i][j];
        }
    }
}

// Function to print the matrix
void printMatrix(int matrix[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    // Example matrices for known plaintext and ciphertext
    int plain[SIZE][SIZE] = { {0, 1}, {2, 3} }; // Replace with actual plaintext matrix
    int cipher[SIZE][SIZE] = { {1, 0}, {0, 1} }; // Replace with actual ciphertext matrix

    int key[SIZE][SIZE];
    recoverKeyMatrix(plain, cipher, key);

    // Output the recovered key matrix
    printf("Recovered key matrix:\n");
    printMatrix(key);

    return 0;
}
